{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Chat History Manager","text":"<p>Minimal, portable tools to capture and retrieve AI chat history.</p> <p>Highlights</p> <ul> <li>Env-first config with <code>${VAR}</code> and <code>${VAR:-default}</code></li> <li>Prototype-friendly secrets via OS keychain (optional)</li> <li>Markdown chunks + JSON index (newest-first)</li> <li>CLI for save/retrieve + VS Code tasks</li> <li>Tests, lint, and commit policy guardrails in CI</li> </ul>"},{"location":"architecture/","title":"Architecture","text":"<p>Architecture Overview</p> <p>Components</p> <ul> <li>Config: <code>chat_history_manager.config</code></li> <li>Env-first settings with <code>${VAR}</code> and <code>${VAR:-default}</code> interpolation.</li> <li>Per-OS default storage path if unset.</li> <li> <p>Index file path derived from base dir.</p> </li> <li> <p>Secrets Provider: <code>chat_history_manager.secrets_provider</code></p> </li> <li>Chain: Environment \u2192 OS keychain (<code>keyring</code> optional extra).</li> <li> <p>Used by config interpolation; safe for prototyping.</p> </li> <li> <p>Data Model: <code>chat_history_manager.models.IndexEntry</code></p> </li> <li> <p>Pydantic model for the index entries (schema + validation).</p> </li> <li> <p>Utilities: <code>chat_history_manager.utils</code></p> </li> <li> <p>Directory management, chunk IO, index read/update, chunk sizing.</p> </li> <li> <p>Domain API: <code>chat_history_manager.main</code></p> </li> <li><code>save_chat_history</code>: create Markdown chunk + update index.</li> <li> <p><code>retrieve_chat_history</code>: filter and return latest chunk contents.</p> </li> <li> <p>CLI: <code>chat_history_manager.cli</code></p> </li> <li><code>save</code> (stdin or file) and <code>retrieve</code> (filters, limit) subcommands.</li> </ul> <p>Storage Model</p> <ul> <li>Markdown chunks: <code>chat_history_00001.md</code>, ...</li> <li>JSON index: <code>chat_history_index.json</code> (newest-first entries).</li> </ul> <p>Operational Concerns</p> <ul> <li>Config &amp; Secrets: No committed personal configs; use env or keychain.</li> <li>Portability: Works out-of-the-box with per-OS defaults.</li> <li>CI: Conventional Commits checks, tests on multiple Python versions, ruff lint/format.</li> </ul>"},{"location":"cli/","title":"CLI","text":"<p>Entry point: <code>chatlog</code></p> <p>Subcommands</p> <ul> <li><code>save</code></li> <li>Required: <code>--project-name</code>, <code>--topic</code></li> <li>Optional: <code>--summary</code>, <code>--session-id</code>, <code>--keywords</code>, <code>--file</code></li> <li>Flags: <code>--dry-run</code> (preview without writing)</li> <li>Content: read from <code>--file</code> or stdin</li> <li><code>retrieve</code></li> <li>Optional filters: <code>--project-name</code>, <code>--topic</code>, <code>--session-id</code></li> <li><code>--limit</code> (default 1)</li> </ul> <p>Examples</p> <pre><code>pbpaste | uv run chatlog save --project-name Repo --topic Setup --summary \"Install\"\nuv run chatlog retrieve --project-name Repo --topic Setup --limit 2\n\nRead-only mode\n\n- Set `CHM_READ_ONLY=1` to prevent writes. Combine with `--dry-run` to preview the next chunk path without modifying the index or files.\n</code></pre>"},{"location":"code_of_conduct/","title":"Code of Conduct","text":"<p>See the repository root <code>CODE_OF_CONDUCT.md</code> for the full text.</p>"},{"location":"configuration/","title":"Configuration","text":"<ul> <li>Env-first configuration; no committed personal configs.</li> <li>Interpolation supports <code>${VAR}</code> and <code>${VAR:-default}</code>.</li> <li>Secrets provider chain: Environment \u2192 OS keychain (if <code>keyring</code> installed).</li> </ul> <p>Defaults</p> <ul> <li>macOS: <code>~/Library/Application Support/chat_history_manager/history</code></li> <li>Linux: <code>${XDG_DATA_HOME:-~/.local/share}/chat_history_manager/history</code></li> <li>Windows: <code>~/AppData/Local/chat_history_manager/history</code></li> </ul> <p>Key variables</p> <ul> <li><code>CHAT_HISTORY_BASE_DIR</code> \u2013 base folder for history/index</li> <li><code>CHAT_RETENTION_MAX_CHUNKS</code> \u2013 keep only newest N chunks (optional)</li> <li><code>CHAT_RETENTION_MAX_AGE_DAYS</code> \u2013 remove entries older than N days (optional)</li> </ul> <p>Examples</p> <pre><code>export CHAT_HISTORY_BASE_DIR='${CHM_HISTORY_DIR:-${HOME}/.local/share/chat_history_manager/history}'\n# set keyring value (macOS example)\npython - &lt;&lt;'PY'\nimport keyring; keyring.set_password('chat_history_manager','CHM_HISTORY_DIR','/path/to/history')\nPY\n</code></pre>"},{"location":"development/","title":"Development","text":"<p>Development Guide (uv + pytest + ruff)</p> <p>Environment</p> <ul> <li>Python managed with <code>uv</code> for fast venv and installs.</li> <li>Editable install with dev extras provides pytest, ruff, pre-commit, commitizen.</li> </ul> <p>Setup</p> <pre><code>make install\nmake hooks\n</code></pre> <p>Everyday tasks</p> <pre><code>make lint      # ruff check\nmake format    # ruff format\nmake test      # pytest with coverage &gt;=85%\nmake docs-serve  # mkdocs live server (install .[docs] first)\n</code></pre> <p>Commit Policy</p> <ul> <li>Use Conventional Commits; run <code>cz commit</code> for guided messages.</li> <li>Keep commits atomic; use <code>git add -p</code> and <code>git rebase -i</code> to curate history.</li> </ul> <p>CI</p> <ul> <li>Tests: <code>python-tests.yml</code> runs on PRs and pushes to main (3.10\u20133.13).</li> <li>Lint: <code>python-lint.yml</code> runs ruff lint and format check.</li> <li>Commit style: <code>commitlint.yml</code> and <code>semantic-pr.yml</code>.</li> <li>Docs: <code>docs.yml</code> builds and publishes to GitHub Pages on main.</li> </ul> <p>Releases</p> <ul> <li>Optional: <code>make cz-bump</code> updates version and <code>CHANGELOG.md</code> from history.</li> </ul>"},{"location":"governance/","title":"Governance","text":"<p>See the repository root <code>GOVERNANCE.md</code> for policy. Summary:</p> <ul> <li>Maintainers review PRs, cut releases, and steer direction.</li> <li>ADRs capture architectural decisions under <code>docs/adr/</code>.</li> <li>Small, focused PRs with green CI; Conventional Commit titles.</li> </ul>"},{"location":"kubernetes/","title":"Kubernetes Integration","text":"<p>Secrets</p> <ul> <li>Use External Secrets Operator to sync cloud secrets to env or files.</li> <li>Map to environment variables consumed by this package (e.g., <code>CHAT_HISTORY_BASE_DIR</code>, custom <code>CHM_HISTORY_DIR</code>).</li> </ul> <p>Example ExternalSecret</p> <pre><code>apiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: chm-secrets\nspec:\n  refreshInterval: 1h\n  secretStoreRef:\n    name: my-secret-store\n    kind: ClusterSecretStore\n  target:\n    name: chm-app-secrets\n  data:\n    - secretKey: CHM_HISTORY_DIR\n      remoteRef:\n        key: /apps/chat-history-manager/history-dir\n</code></pre> <p>Example Deployment env</p> <pre><code>env:\n  - name: CHAT_HISTORY_BASE_DIR\n    value: '${CHM_HISTORY_DIR:-/data/chat-history}'\n  - name: CHAT_RETENTION_MAX_CHUNKS\n    value: '1000'\n</code></pre> <p>Storage</p> <ul> <li>Mount a PersistentVolume at the path used by <code>CHAT_HISTORY_BASE_DIR</code>.</li> </ul>"},{"location":"security/","title":"Security","text":"<p>See the repository root <code>SECURITY.md</code> for the full policy. Highlights:</p> <ul> <li>No secrets in Git; use env and cloud secret stores.</li> <li>For dev, use OS keychain via <code>keyring</code> (optional).</li> <li>For Kubernetes, use External Secrets Operator.</li> </ul>"},{"location":"usage/","title":"Quickstart","text":"<ul> <li>Create venv: <code>uv venv</code></li> <li>Install dev deps: <code>uv pip install -e .[dev]</code></li> <li>Optional secrets: <code>uv pip install .[secrets]</code> (keyring)</li> <li>Enable hooks: <code>pre-commit install &amp;&amp; pre-commit install --hook-type commit-msg</code></li> <li>Makefile: <code>make lint | make format | make test | make ci</code></li> </ul>"},{"location":"usage/#save-retrieve","title":"Save &amp; Retrieve","text":"<ul> <li>Save from stdin:</li> <li><code>pbpaste | uv run chatlog save --project-name MyProj --topic Setup --summary \"Initial setup\"</code></li> <li>Save from a file:</li> <li><code>uv run chatlog save --project-name MyProj --topic Setup --file notes.txt</code></li> <li>Retrieve latest 3:</li> <li><code>uv run chatlog retrieve --project-name MyProj --topic Setup --limit 3</code></li> </ul>"},{"location":"adr/0000-template/","title":"{ID}. {Title}","text":"<p>Date: {YYYY-MM-DD}</p>"},{"location":"adr/0000-template/#status","title":"Status","text":"<p>{Proposed | Accepted | Deprecated | Superseded}</p>"},{"location":"adr/0000-template/#context","title":"Context","text":"<p>{What is the issue that we're seeing that is motivating this decision or change?}</p>"},{"location":"adr/0000-template/#decision","title":"Decision","text":"<p>{What is the change that we're proposing and/or doing?}</p>"},{"location":"adr/0000-template/#consequences","title":"Consequences","text":""},{"location":"adr/0000-template/#positive","title":"Positive","text":"<ul> <li>{List of benefits}</li> </ul>"},{"location":"adr/0000-template/#negative","title":"Negative","text":"<ul> <li>{List of trade-offs}</li> </ul>"},{"location":"adr/0001-adopt-12-factor-config-and-secrets-chain/","title":"1. Adopt 12-Factor Config and Secrets Chain","text":"<p>Date: 2025-09-03</p>"},{"location":"adr/0001-adopt-12-factor-config-and-secrets-chain/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"adr/0001-adopt-12-factor-config-and-secrets-chain/#context","title":"Context","text":"<p>We must avoid repository-coupled personal configurations and secrets, while enabling portable development and CI/CD. Values should be provided at runtime and work across macOS, Linux, and Windows.</p>"},{"location":"adr/0001-adopt-12-factor-config-and-secrets-chain/#decision","title":"Decision","text":"<p>Adopt an env-first configuration model with <code>${VAR}</code> and <code>${VAR:-default}</code> interpolation. Implement a secrets provider that resolves keys from environment variables first, then the OS keychain (<code>keyring</code>) for prototype-friendly development. Provide sensible per-OS defaults when not configured.</p>"},{"location":"adr/0001-adopt-12-factor-config-and-secrets-chain/#consequences","title":"Consequences","text":""},{"location":"adr/0001-adopt-12-factor-config-and-secrets-chain/#positive","title":"Positive","text":"<ul> <li>Clean repos with no personal configs or secrets.</li> <li>Portable setups and reproducible CI.</li> <li>Easy override in local shells and orchestrators.</li> </ul>"},{"location":"adr/0001-adopt-12-factor-config-and-secrets-chain/#negative","title":"Negative","text":"<ul> <li>Requires developers to set environment variables or keychain entries.</li> <li>Some complexity in interpolation logic and support.</li> </ul>"},{"location":"adr/0002-chat-storage-format-and-index/","title":"2. Chat Storage Format and Index","text":"<p>Date: 2025-09-03</p>"},{"location":"adr/0002-chat-storage-format-and-index/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"adr/0002-chat-storage-format-and-index/#context","title":"Context","text":"<p>We need a simple, local-first way to persist chat history and retrieve the latest context segments by project/topic/session.</p>"},{"location":"adr/0002-chat-storage-format-and-index/#decision","title":"Decision","text":"<p>Store chat chunks as Markdown files (<code>chat_history_00001.md</code>, ...). Maintain a JSON index (<code>chat_history_index.json</code>) with newest-first entries represented by a validated Pydantic model. Chunks store raw text; the index stores metadata for filtering.</p>"},{"location":"adr/0002-chat-storage-format-and-index/#consequences","title":"Consequences","text":""},{"location":"adr/0002-chat-storage-format-and-index/#positive","title":"Positive","text":"<ul> <li>Human-readable, easy to inspect and backup.</li> <li>Simple append/prepend operations on index.</li> <li>Efficient retrieval by metadata without scanning content.</li> </ul>"},{"location":"adr/0002-chat-storage-format-and-index/#negative","title":"Negative","text":"<ul> <li>No full-text search; future work may add indexing or external search.</li> <li>Large histories may require compaction/rotation policies later.</li> </ul>"},{"location":"adr/0003-cli-surface-and-vscode-tasks/","title":"3. CLI Surface and VS Code Tasks","text":"<p>Date: 2025-09-03</p>"},{"location":"adr/0003-cli-surface-and-vscode-tasks/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"adr/0003-cli-surface-and-vscode-tasks/#context","title":"Context","text":"<p>Developers need quick capture and retrieval flows during day-to-day work, including clipboard \u2192 log and terminal-first usage.</p>"},{"location":"adr/0003-cli-surface-and-vscode-tasks/#decision","title":"Decision","text":"<p>Provide a Python console script <code>chatlog</code> with <code>save</code> and <code>retrieve</code> subcommands. Add VS Code tasks for saving clipboard content and retrieving filtered chunks, relying on environment-driven config.</p>"},{"location":"adr/0003-cli-surface-and-vscode-tasks/#consequences","title":"Consequences","text":""},{"location":"adr/0003-cli-surface-and-vscode-tasks/#positive","title":"Positive","text":"<ul> <li>Fast, scriptable workflows; minimal friction to log chats.</li> <li>Editor integration for common actions.</li> </ul>"},{"location":"adr/0003-cli-surface-and-vscode-tasks/#negative","title":"Negative","text":"<ul> <li>Editor-specific tasks need maintenance; CLI remains the stable surface.</li> </ul>"},{"location":"adr/0004-testing-and-tooling-strategy/","title":"4. Testing and Tooling Strategy","text":"<p>Date: 2025-09-03</p>"},{"location":"adr/0004-testing-and-tooling-strategy/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"adr/0004-testing-and-tooling-strategy/#context","title":"Context","text":"<p>We need a modern, fast developer workflow with robust testing and linting, and consistent environments.</p>"},{"location":"adr/0004-testing-and-tooling-strategy/#decision","title":"Decision","text":"<p>Adopt:</p> <ul> <li><code>uv</code> for venv and dependency management.</li> <li><code>pytest</code> for tests with coverage \u226585%.</li> <li><code>ruff</code> for lint and format.</li> <li><code>pre-commit</code> hooks for local enforcement.</li> <li>CI workflows for tests (matrix) and lint.</li> </ul>"},{"location":"adr/0004-testing-and-tooling-strategy/#consequences","title":"Consequences","text":""},{"location":"adr/0004-testing-and-tooling-strategy/#positive","title":"Positive","text":"<ul> <li>Fast feedback loops; consistent style and quality.</li> <li>Clear, enforceable quality bars in CI.</li> </ul>"},{"location":"adr/0004-testing-and-tooling-strategy/#negative","title":"Negative","text":"<ul> <li>Additional tooling to install locally.</li> </ul>"},{"location":"adr/0005-commit-policy-and-ci-guardrails/","title":"5. Commit Policy and CI Guardrails","text":"<p>Date: 2025-09-03</p>"},{"location":"adr/0005-commit-policy-and-ci-guardrails/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"adr/0005-commit-policy-and-ci-guardrails/#context","title":"Context","text":"<p>Readable history and safe merging practices are essential for collaboration and traceability across environments.</p>"},{"location":"adr/0005-commit-policy-and-ci-guardrails/#decision","title":"Decision","text":"<p>Adopt Conventional Commits and atomic commits. Enforce via pre-commit/Commitizen locally and CI checks for commit messages and PR titles. Recommend required status checks on <code>main</code> for merges.</p>"},{"location":"adr/0005-commit-policy-and-ci-guardrails/#consequences","title":"Consequences","text":""},{"location":"adr/0005-commit-policy-and-ci-guardrails/#positive","title":"Positive","text":"<ul> <li>Clean, searchable history and reliable automation.</li> <li>Consistency across contributors and tools.</li> </ul>"},{"location":"adr/0005-commit-policy-and-ci-guardrails/#negative","title":"Negative","text":"<ul> <li>Slight overhead for contributors to learn and adhere to the standard.</li> </ul>"},{"location":"adr/0006-introduce-retention-policies/","title":"6. Introduce Retention Policies","text":"<p>Date: 2025-09-03</p>"},{"location":"adr/0006-introduce-retention-policies/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"adr/0006-introduce-retention-policies/#context","title":"Context","text":"<p>Long-running histories can grow unbounded. We need basic retention to prevent excessive storage usage without introducing a heavy dependency.</p>"},{"location":"adr/0006-introduce-retention-policies/#decision","title":"Decision","text":"<p>Add optional retention policies configured via environment variables:</p> <ul> <li><code>CHAT_RETENTION_MAX_CHUNKS</code>: keep only the newest N chunks.</li> <li><code>CHAT_RETENTION_MAX_AGE_DAYS</code>: remove entries older than N days.</li> </ul> <p>Retention runs after each save operation. The index is rewritten, and pruned chunk files are deleted.</p>"},{"location":"adr/0006-introduce-retention-policies/#consequences","title":"Consequences","text":""},{"location":"adr/0006-introduce-retention-policies/#positive","title":"Positive","text":"<ul> <li>Prevents unbounded growth with minimal complexity.</li> <li>Keeps newest context available by default.</li> </ul>"},{"location":"adr/0006-introduce-retention-policies/#negative","title":"Negative","text":"<ul> <li>Deletions are irreversible; backups/archives should be handled separately.</li> <li>Age-based pruning uses local time; future work could add UTC handling.</li> </ul>"}]}